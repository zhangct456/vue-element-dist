webpackJsonp([8],{"94G3":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",[n("h2",[t._v("Vuex状态管理器")]),t._v(" "),n("h4",[t._v("安装")]),t._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[t._v("cnpm install vuex --save\n")])]),t._v(" "),n("hr"),t._v(" "),n("h4",[t._v("配置")]),t._v(" "),n("p",[t._v("创建文件夹"),n("code",{pre:!0},[t._v("src/store")]),t._v("用来放vuex相关的js文件；")]),t._v(" "),n("p",[t._v("创建文件"),n("code",{pre:!0},[t._v("menu.js")]),t._v("来管理菜单：")]),t._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[t._v("import axios from \"@/setting/axios.conf\"\n//获取菜单内容的方法\nimport {getSubMenu} from \"@/utils\"\n\nexport default {\n\tstate: {\n\t\tmenuList: [],\t\t//菜单内容\n\t\tfirstGet: true\t\t//判断是否是第一次获取菜单\n\t},\n\tgetters: {\n\t\tgetMenuList(state) {\n\t\t\t//获取菜单\n\t\t\treturn state.menuList;\n\t\t},\n\t\tgetSubMenu(state) {\n\t\t\t//传入子菜单名key，获取子菜单\n\t\t\treturn function(key) {\n\t\t\t\tif(state.menuList && state.menuList.length != 0) {\n\t\t\t\t\tfor(let i = 0; i < state.menuList.length; i++) {\n\t\t\t\t\t\tif(state.menuList[i].name == key) {\n\t\t\t\t\t\t\treturn state.menuList[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tmutations: {\n\t\tupdateMenuList(state, menuList) {\n\t\t\tstate.menuList = menuList;\n\t\t},\n\t\tupdateFirstGet(state, firstGet) {\n\t\t\tstate.firstGet = firstGet;\n\t\t}\n\t},\n\tactions: {\n\t\tgetMenuList(context, reGetFlag) {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tif(!context.state.menuList || context.state.firstGet || reGetFlag) {\n\t\t\t\t\t//两种获取方式\t\n\t\t\t\t\t//1发交易获取菜单\n//\t\t\t\t\taxios.post('menu.do', {}).then(function(data) {\n//\t\t\t\t\t\tcontext.commit('updateFirstGet', false);\n//\t\t\t\t\t\tcontext.commit('updateMenuList', data.List);\n//\t\t\t\t\t\tresolve(context.state.menuList);\n//\t\t\t\t\t})\n\t\t\t\t\t//2直接和router共用菜单\n\t\t\t\t\tlet menulist = getSubMenu();\n\t\t\t\t\tcontext.commit('updateFirstGet', false);\n\t\t\t\t\tcontext.commit('updateMenuList', menulist);\n\t\t\t\t\tresolve(context.state.menuList);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(context.state.menuList);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n")])]),t._v(" "),n("p",[t._v("在"),n("code",{pre:!0},[t._v("store/index.js")]),t._v("中引入所有store对象，放进"),n("code",{pre:!0},[t._v("modules")]),t._v("：")]),t._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[t._v("import Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport Menu from \"./menu\"\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  modules: {\n    Menu\n  }\n})\n")])]),t._v(" "),n("p",[t._v("在"),n("code",{pre:!0},[t._v("main.js")]),t._v("中加载为全局组件：")]),t._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[t._v("...\nimport store from './store'\n\nnew Vue({\n  el: '#app',\n  router,\n  store,\n  components: { App },\n  template: '<App/>'\n})\n")])]),t._v(" "),n("p",[t._v("之后用"),n("code",{pre:!0},[t._v("this.$store")]),t._v("调用：")]),t._v(" "),n("ul",[n("li",[n("code",{pre:!0},[t._v("state")]),t._v("：唯一数据源，调用时使用"),n("code",{pre:!0},[t._v("this.$store.state.xxx")])]),t._v(" "),n("li",[n("code",{pre:!0},[t._v("getters")]),t._v("：类似计算属性，getter的返回值会根据它的依赖被缓存起来，只有当它的依赖值发生了改变才会被重新计算，调用时使用"),n("code",{pre:!0},[t._v("this.$store.getters.getSubMenu")]),t._v("，如需传参返回值写成函数；")]),t._v(" "),n("li",[n("code",{pre:!0},[t._v("mutations")]),t._v("：更改state的唯一方法，只能是同步函数，调用时用"),n("code",{pre:!0},[t._v("this.$store.commit('xxx',xxx)")])]),t._v(" "),n("li",[n("code",{pre:!0},[t._v("actions")]),t._v("：不直接更改状态，接受一个与 store 实例具有相同方法和属性的 context 对象，通过调用"),n("code",{pre:!0},[t._v("context.commit")]),t._v("更改"),n("code",{pre:!0},[t._v("state")]),t._v("，支持异步操作")])]),t._v(" "),n("blockquote",[n("p",[t._v("mutations 中的方法是不分组件的 , 假如你在 dialog_stroe.js 文件中的定义了switch_dialog 方法 ,\n在其他文件中的一个 switch_dialog 方法 ,\n那么$store.commit('switch_dialog') 会执行所有的 switch_dialog 方法。")])]),t._v(" "),n("hr"),t._v(" "),n("h4",[t._v("调用getters")]),t._v(" "),n("p",[t._v("在需要调用的组件里写对应的计算属性：")]),t._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[t._v("...\n\tcomputed: {\n\t\tmenu() {\n\t\t\treturn this.$store.getters.getMenuList;\n\t\t},\n\t\tsubMenu() {\n\t\t\tlet menu = this.$store.getters.getSubMenu(this.subMenuName);\n\t\t\treturn menu.children;\n\t\t}\n\t},\n...\n")])]),t._v(" "),n("p",[n("code",{pre:!0},[t._v("this.$store.getters.getMenuList")]),t._v("返回一个数组；")]),t._v(" "),n("p",[n("code",{pre:!0},[t._v("this.$store.getters.getSubMenu")]),t._v("返回一个方法，所以能传入参数获取结果。")]),t._v(" "),n("hr"),t._v(" "),n("h4",[t._v("调用actions")]),t._v(" "),n("p",[t._v("调用"),n("code",{pre:!0},[t._v("getMenuList")]),t._v("异步获取菜单，返回一个Promise对象：")]),t._v(" "),n("pre",{pre:!0},[n("code",{attrs:{"v-pre":""}},[t._v("this.$store.dispatch('getMenuList').then(function(data){\n\t...\n})\n")])])])}]},r=n("C7Lr")(null,s,!1,null,null,null);e.default=r.exports},r76S:function(t,e,n){t.exports=n("94G3")}});
//# sourceMappingURL=8.js.map?65ff4e116a2b86aba29c